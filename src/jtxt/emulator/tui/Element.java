/*
 * Copyright 2019 Lane W. Surface
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package jtxt.emulator.tui;

import jtxt.Message;

public interface Element {
  /**
   * This method is called whenever an event is received by the terminal from
   * a client. The event is propagated down the tree of elements, finally
   * being received here. The message type determines what kind of action
   * occurred and whether it requires a response from this element.
   *
   * @param message The message that was generated by the user in the terminal.
   * @param delta The amount of time that has passed since the last message
   *  was received.
   */
  void update(
    Message message,
    double delta);

  /**
   * The element should use this method to redraw itself. It SHOULD NOT
   * block, as other elements are waiting on this one to complete before they
   * draw themselves.
   */
  void draw();

  /**
   * Retrieves the frame which this element draws itself upon. Note that this
   * frame should not be modified from outside the element which owns it.
   * Operations like cliping and bliting are okay, though, because they
   * return a new instance of frame.
   *
   * @return A frame which this element may use to draw itself.
   */
  Frame getFrame();

  /**
   * Gets the width which this element was set to (not the bounds of the
   * element in its parent composite, as an element has no knowledge of this.)
   *
   * @return The width this element was set to.
   */
  int getWidth();

  /**
   * Gets the height which this element was set to (not the bounds of the
   * element in its parent composite, as an element has no knowledge of this.)
   *
   * @return The height this element was set to.
   */
  int getHeight();

  /**
   * Sets the width of this element. This does not guarantee that the element
   * will be rendered appropriately. See the documentation for more
   * information about the way that {@code Layout}s dictate the appearance of
   * elements in a composite.
   *
   * @param width The new width for this element.
   */
  void setWidth(int width);

  /**
   * Sets the height of this element. This does not guarantee that the element
   * will be rendered appropriately. See the documentation for more
   * information about the way that {@code Layout}s dictate the appearance of
   * elements in a composite.
   *
   * @param height The new height for this element.
   */
  void setHeight(int height);

  boolean equals(Object o);
  int hashCode();
  default void setDimensions(
    int width,
    int height)
  {
    setWidth(width);
    setHeight(height);
  }
  static Element createScrollableElement(
    int width,
    int height,
    Element e)
  {
    return new ScrollableContainer(
      width,
      height,
      e);
  }
}
