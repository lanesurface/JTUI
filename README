ABOUT THIS PROJECT

In my search for a pure Java library for creating appealing texual user-interfaces,
I came up short of anything that resembled a suitable solution. Available
libraries either attempt to wrap native ncurses code or are inadequate for the
types of projects that I wish to build. This library therefore aims to fill that
need for a reliable, modern, and pure-Java library for creating appealing
TUIs.

The ultimate goal of this project is to not only make it easy to create the
interfaces that you want when you are limited to a non-windows based graphics
environment, but also to make these graphics elements appealing, modern, and
sleek.

The TUIs can either be output to a system console if the terminal supports
UTF-8 and the ANSI standard for formatting characters, or they can be displayed
in the terminal emulator bundled with this project. Because I want code based
on this library to be as simple as possible, and learning how to use it a
painless and uncumbersome process, this should all be transparent to you.
Simply knowing how to construct an intance of a terminal which you can draw your
components to should be enough. Refer to the documentation for further details
about how this should be done.

Following is a list of a few popular terminals and emulators that should be
capable of displaying an application.

COMPATIBLE TERMINALS AND EMULATORS

Because I use ANSI escape sequences to encode the character color data (and
possibly other escape sequences in the future), a compatible terminal must be
used to display it. Suitable terminals need to also support UTF-8.

 * Compatible Terminals: Cygwin,
                         Windows Subsystem for Linux (WSL) bash prompt,
                         IntelliJ console (with limited color support),
                         Any terminal installed by default on Linux/OS X

 * Incompatible Terminals: Command Prompt,
                           Commander

BUILDING THIS PROJECT

As a part of this project, I have included some scripts to make compiling the
classes easier. These tools can be found in the tools directory, and will help
with creating new projects based on the library. At this moment, the build will
automatically be tested against the library, but in the future, I will divide
up some of the parts of this test script into their own files. To build and run
the tests, follow these steps at a command prompt or terminal:

    */Java-Terminal-Emulator$ cd tools
    */Java-Terminal-Emulator/tools$ python test-api.py

The project will be built and run automatically. Building requires Python 3.X
or greater. Some classpath errors may occur on Linux. (I have only successfully
tested this script against Windows 10, Python 3.6.0.)
